#!/usr/bin/env python2
#
# fMBT, free Model Based Testing tool
# Copyright (c) 2014-2019, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
fMBT debugger

Usage: fmbt-debug [options]

Options:
  -p, --port PORT                 listen to remote connection to PORT
                                  instead of local connection to session.
                                  If --port is given, session is not needed.
                                  PORT >= 1024 does not require root
                                  privileges.
                                  Remote Python code to be debugged must call
                                  fmbt.debug("HOST:PORT")

  -s, --session SESSION_ID        wait for local connection on SESSION_ID.
                                  Local Python code to be debugged must call
                                  fmbt.debug(SESSION_ID)

If no options are given, debug local Python code that calls fmbt.debug().
"""

import getopt
import os
import sys
import socket

if os.name != "nt":
    import select
else:
    import thread
    import Queue

host = "127.0.0.1"
PORTBASE = 0xf4bd

def error(msg, exitstatus=1):
    sys.stderr.write(f"fmbt-debug: {msg}" + "\n")
    sys.exit(exitstatus)

def info(msg):
    sys.stdout.write(f"fmbt-debug: {msg}" + "\n")
    sys.stdout.flush()

if os.name != "nt":
    def read_input(list_of_files):
        files_with_msg, _, _ = select.select(list_of_files, [], [])
        if files_with_msg:
            f = files_with_msg[0]
            msg = f.recv(4096) if hasattr(f, "recv") else f.readline()
        else:
            msg, f = None, None
        return (msg, f)
else:
    # select.select does not work for file objects on Windows,
    # fallback to blocked reads on threads.
    def _read_to_queue(f, q, allfiles):
        msg = None
        while msg != "":
            if hasattr(f, "recv"):
                msg = f.recv(4096)
            else:
                try:
                    msg = f.readline()
                except:
                    msg = ""
            q.put((msg, f))
        allfiles.remove(f)

    def read_input(list_of_files):
        for f in list_of_files:
            if f not in read_input._files:
                read_input._files.add(f)
                thread.start_new_thread(
                    _read_to_queue, (f, read_input._queue, read_input._files))
        return read_input._queue.get()

    read_input._queue = Queue.Queue()
    read_input._files = set()

if __name__ == "__main__":
    opt_port = None
    opt_session = None
    try:
        opts, remainder = getopt.getopt(
            sys.argv[1:], 'hp:s:',
            ['help', 'port=', 'session='])
    except getopt.GetoptError, e:
        error(str(e))
    for opt, arg in opts:
        if opt in ['-h', '--help']:
            print __doc__
            sys.exit(0)
        elif opt in ['-p', '--port']:
            if not opt_session is None:
                error('give either --port or --session')
            try:
                opt_port = int(arg)
            except ValueError:
                error('invalid --port %r, integer expected' % (arg,))
        elif opt in ['-s', '--session']:
            if not opt_port is None:
                error('give either --port or --session')
            try:
                opt_session = int(arg)
            except ValueError:
                error('invalid --session %r, integer expected' % (arg,))

    if len(remainder) > 1:
        error("illegal arguments, see --help")
    elif len(remainder) == 1:
        if not (opt_session is None and opt_port is None):
            error('give either --port or --session without extra arguments')
        # backward-compatibility: -p and -s are missing, use remainder[0] as
        # SESSION_ID.
        try:
            opt_session = int(remainder[0])
        except ValueError:
            error('illegal session "%s", integer expected' % (remainder[0],))
    else: # len(remainder) == 0
        if opt_session is None:
            opt_session = 0
    if opt_port is None:
        port = PORTBASE + opt_session
        host = '127.0.0.1'
    else:
        port = opt_port
        host = ''

    # Listen to connections from fmbt.debug() at host:port.
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    except:
        pass
    conn = None
    try:
        s.bind((host, port))
        s.listen(1)
        if opt_port:
            info("waiting for fmbt.debug('THIS_HOST:%s')" % (opt_port,))
        elif not opt_session is None:
            info("waiting for local fmbt.debug(%s)" % (opt_session,))
        else:
            info("waiting for local fmbt.debug()")
        while True:
            (conn, addr) = s.accept()
            conn.sendall("fmbt-debug\n")
            msg = conn.recv(len("fmbt.debug\n"))
            if msg.startswith("fmbt.debug"):
                break
            conn.close()
    except socket.error, e:
        # Port is already in use. Perhaps fmbt.debug() is already
        # listening to it and waiting for this process to
        # connect.
        try:
            s.connect((host, port))
            conn = s
        except socket.error:
            error('cannot listen or connect to %s:%s' % (host, port))
        whos_there = conn.recv(len("fmbt.debug\n"))
        # make sure to connect to fmbt.debug(), not to another fmbt-debug
        if not whos_there.startswith("fmbt.debug"):
            conn.close()
            if whos_there.startswith("fmbt-debug"):
                error('fmbt-debug is already listening to session %s"' % (port-PORTBASE,))
            else:
                error('unexpected answer "%s"' % (whos_there.strip(),))
        conn.sendall("fmbt-debug\n")

    in_file = sys.stdin
    out_file = sys.stdout
    while 1:
        msg, src_file = read_input([in_file, conn])
        if msg == "" or msg == None:
            break
        elif src_file == in_file:
            conn.sendall(msg)
        elif src_file == conn:
            out_file.write(msg)
            out_file.flush()
    try:
        conn.close()
    except socket.error:
        pass
